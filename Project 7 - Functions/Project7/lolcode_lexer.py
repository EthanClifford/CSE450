import re
from . rply import LexerGenerator


def build_lexer():
    lg = LexerGenerator()
    lg.ignore(r'BTW.*')
    # next line help: from https://stackoverflow.com/questions/36341733/regex-expression-for-multiline-comment-in-python
    lg.ignore(r'OBTW(.*?)TLDR', re.DOTALL)
    lg.ignore(r' ')
    lg.ignore(r'\t')
    lg.add('NUMBRS', r'NUMBRS')
    lg.add('NUMBARS', r'NUMBARS')
    lg.add('LETTRS', r'LETTRS')
    lg.add('TROOFS', r'TROOFS')
    lg.add('YARN', r'YARN')
    lg.add('IDENT\'Z', r'[a-zA-Z][a-zA-Z0-9_]*\'Z')
    lg.add('PRIMITIVE_TYPE', r'NUMBR|NUMBAR|LETTR|TROOF')
    lg.add('BANG', r'!')
    lg.add('NUMBAR_LITERAL', r'[-]?[0-9]*[.][0-9]+')
    lg.add('NUMBR_LITERAL', r'[-]?[0-9]+')
    lg.add('LETTR_LITERAL', r"'..?'")
    # next line help: https://superuser.com/questions/903168/how-should-i-write-a-regex-to-match-a-specific-word
    lg.add('TROOF_LITERAL', r'\bWIN\b|\bFAIL\b')
    lg.add('COMPARISON_BINARY_OPERATOR', r'SAEM |DIFFRINT |FURSTSMALLR |FURSTBIGGR ')
    lg.add('MATH_BINARY_OPERATOR', r'SUM |DIFF |PRODUKT |QUOSHUNT |BIGGR |SMALLR ')
    lg.add('MATH_UNARY_OPERATOR', r'FLIP |SQUAR ')
    lg.add('LOGICAL_BINARY_OPERATOR', r'BOTH |EITHER |WON ')
    lg.add('LOGICAL_UNARY_OPERATOR', r'NOT ')
    lg.add('LOGICAL_VARIABLE_OPERATOR', r'ALL |ANY ')
    lg.add('ASSIGNMENT_OPERATOR', r'UPPIN|NERFIN')
    lg.add('NEWLINE', r"\n")
    # lg.add('SINGLE_COMMENT', r'BTW[.]+')
    # lg.add('MULTI_COMMENT', r'OBTW[.]+TLDR')
    lg.add('HAI', r'HAI')
    lg.add('KTHXBYE', r'KTHXBYE')
    lg.add('VISIBLE', r'VISIBLE ')
    lg.add('GIMMEH', r'GIMMEH')
    lg.add('LENGTHZ', r'LENGTHZ')
    lg.add('WHATEVR', r'WHATEVR')
    lg.add('GTFO', r'GTFO')
    lg.add('OMGWTF', r'OMGWTF')
    lg.add('HOW', r'HOW')
    lg.add('YR', r'YR')
    lg.add('WTF?', r'WTF\?')
    lg.add('OMG', r'OMG')
    lg.add('SO', r'SO')
    lg.add('SAY', r'SAY')
    lg.add('ITZ', r'ITZ ')
    lg.add('IF', r'IF')
    lg.add('IM', r'IM ')
    lg.add('IN', r'IN ')
    lg.add('YR', r'YR ')
    lg.add('IZ', r'IZ ')
    lg.add('I', r'I ')
    lg.add('LOOP', r'LOOP')
    lg.add('FOUND', r'FOUND')
    lg.add('HAS', r'HAS ')
    lg.add('AN', r'AN ')
    lg.add('A', r'A ')
    lg.add('RLY?', r'RLY\? ')
    lg.add('RLY', r'RLY')
    lg.add('MEBBE', r'MEBBE ')
    lg.add('LOTZ', r'LOTZ ')
    lg.add('THAR', r'THAR ')
    lg.add('YA', r'YA ')
    lg.add('NOW', r'NOW ')
    lg.add('NO', r'NO ')
    lg.add('WAI', r'WAI')
    lg.add('OIC', r'OIC')
    lg.add('PUT', r'PUT ')
    lg.add('U', r'U')
    lg.add('R', r'R ')
    lg.add('OUTTA', r'OUTTA ')
    lg.add('OF', r'OF ')
    lg.add('O', r'O ')
    lg.add('MKAY', r'MKAY')
    lg.add('BY', r'BY ')
    lg.add('TIL', r'TIL ')
    lg.add('IDENTIFIER', r'[a-zA-Z][a-zA-Z0-9_]*')
    lg.add('YARN_LITERAL', r'"(.*)"')
    lg.add('ERROR', r'.')
    lexer = lg.build()
    return lexer
